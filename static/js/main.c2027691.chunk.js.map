{"version":3,"sources":["app/hooks.ts","slices/expensesSlice.ts","slices/wagesSlice.ts","utilities/csv-utils.ts","components/DatePickerWrapper.tsx","components/DataRow.tsx","components/Table.tsx","slices/chartSlice.ts","utilities/date-utils.ts","utilities/chart-utils.ts","components/DataChart.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","expensesSlice","createSlice","name","initialState","reducers","addExpense","state","action","id","uuid","payload","defaultExpense","label","date","Date","now","amount","frequency","bulkAddExpenses","forEach","expense","updateExpense","orig","update","undefined","removeExpense","actions","selectExpenses","expenses","wageSlice","addWage","defaultWage","bulkAddWages","wage","updateWage","removeWage","selectWages","wages","convertCSVRowIntoDataRow","csvRow","parseInt","parseFloat","freqency","isNaN","DatePickerWrapper","props","LocalizationProvider","dateAdapter","AdapterDateFns","MobileDatePicker","inputFormat","value","onChange","getTime","renderInput","params","TextField","DataRow","TableRow","TableCell","className","variant","data","e","updateRow","target","type","FormControl","fullWidth","Select","MenuItem","onClick","deleteRow","DataTable","style","textAlign","title","addRow","maxHeight","overflowX","stickyHeader","TableHead","TableBody","Object","entries","map","entry","row","accept","files","file","reader","FileReader","onload","evt","bstr","result","rows","parse","toString","dataRows","i","length","dataRow","push","onImportComplete","readAsBinaryString","Button","filename","csvContent","csvRows","unshift","convertDataRowIntoCSVRows","values","join","link","document","createElement","setAttribute","click","remove","defaultEndDate","setDate","getDate","finances","aggregateOption","startTimeMs","endTimeMs","chartSlice","setChartData","setAgggregateOption","setStartTimeMs","setEndTimeMs","selectChartExpenses","chart","selectChartWages","selectChartFinances","selectChartAgggregateOption","selectChartStartTimeMs","selectChartEndTimeMs","MILLIS_PER_WEEK","createDateFromKey","key","retVal","createdDate","year","Number","setFullYear","getMonthInMMFormat","month","actualMonth","generateRecurringChartData","startDateMs","endDateMs","timeMs","incrementDate","d","setMonth","getMonth","getFullYear","aggregateChartDataByFrequency","Map","val","createKeyByAggregateOptionAndDate","get","sum","set","Chart","register","Legend","LineController","LineElement","PointElement","LinearScale","TimeScale","Title","Tooltip","chartConfig","datasets","fill","backgroundColor","borderColor","options","responsive","plugins","legend","position","display","text","scales","x","distribution","y","DataChart","dispatch","chartContainer","useRef","chartInstance","expensesData","wagesData","useEffect","current","destroy","finanacesPoints","point","wagesPoints","expensesPoints","chartData","allExpensesChartData","allWagesChartData","aggregatedExpensesMap","aggregatedWagesMap","expensesChartPoints","wagesChartPoints","sort","a","b","aggregatedFinancesMap","financesChartPoints","convertDataRowsIntoChartData","minWidth","InputLabel","labelId","event","option","ref","App","expensesTimeArr","minTime","Math","min","maxTime","max","store","configureStore","reducer","expensesReducer","wagesReducer","chartReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c2027691.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../app/store';\nimport { Expense } from '../common/expense';\nimport { uuid } from 'uuidv4';\n\nexport interface ExpensesState {\n  [id: string]: Expense;\n}\n\nconst initialState: ExpensesState = {};\n\nexport const expensesSlice = createSlice({\n  name: 'expenses',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    addExpense: (state, action: PayloadAction<Expense | null>) => {\n      const id = uuid();\n      if (action.payload) {\n        state[id] = action.payload;\n      } else {\n        const defaultExpense: Expense = {\n          label: '',\n          date: Date.now(),\n          amount: 0,\n          frequency: 'once',\n        };\n        state[id] = defaultExpense;\n      }\n    },\n    bulkAddExpenses: (state, action: PayloadAction<Expense[]>) => {\n      action.payload.forEach((expense) => {\n        const id = uuid();\n        state[id] = expense;\n      });\n    },\n    updateExpense: (\n      state,\n      action: PayloadAction<{ id: string; expense: Partial<Expense> }>\n    ) => {\n      const orig = state[action.payload.id];\n      const update = action.payload.expense;\n      // hard-code the updated fields\n      if (update.amount !== undefined) orig.amount = update.amount;\n      if (update.date !== undefined) orig.date = update.date;\n      if (update.frequency !== undefined) orig.frequency = update.frequency;\n      if (update.label !== undefined) orig.label = update.label;\n    },\n    removeExpense: (state, action: PayloadAction<{ id: string }>) => {\n      delete state[action.payload.id];\n    },\n  },\n});\n\nexport const { addExpense, bulkAddExpenses, updateExpense, removeExpense } =\n  expensesSlice.actions;\n\nexport const selectExpenses = (state: RootState) => state.expenses;\n\nexport default expensesSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../app/store';\nimport { Wage } from '../common/wage';\nimport { uuid } from 'uuidv4';\n\nexport interface WagesState {\n  [id: string]: Wage;\n}\n\nconst initialState: WagesState = {};\n\nexport const wageSlice = createSlice({\n  name: 'wage',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    addWage: (state, action: PayloadAction<Wage | null>) => {\n      const id = uuid();\n      if (action.payload) {\n        state[id] = action.payload;\n      } else {\n        const defaultWage: Wage = {\n          label: '',\n          date: Date.now(),\n          amount: 0,\n          frequency: 'once',\n        };\n        state[id] = defaultWage;\n      }\n    },\n    bulkAddWages: (state, action: PayloadAction<Wage[]>) => {\n      action.payload.forEach((wage) => {\n        const id = uuid();\n        state[id] = wage;\n      });\n    },\n    updateWage: (\n      state,\n      action: PayloadAction<{ id: string; wage: Partial<Wage> }>\n    ) => {\n      const orig = state[action.payload.id];\n      const update = action.payload.wage;\n      // hard-code the updated fields\n      if (update.amount !== undefined) orig.amount = update.amount;\n      if (update.date !== undefined) orig.date = update.date;\n      if (update.frequency !== undefined) orig.frequency = update.frequency;\n      if (update.label !== undefined) orig.label = update.label;\n    },\n    removeWage: (state, action: PayloadAction<{ id: string }>) => {\n      delete state[action.payload.id];\n    },\n  },\n});\n\nexport const { addWage, bulkAddWages, updateWage, removeWage } =\n  wageSlice.actions;\n\nexport const selectWages = (state: RootState) => state.wages;\n\nexport default wageSlice.reducer;\n","import { IDataRow } from '../common/idatarow';\nimport { IFrequency } from '../common/common-types';\n\nexport function createCSV(rows: string[][]) {\n  let csvContent =\n    'data:text/csv;charset=utf-8,' + rows.map((e) => e.join(',')).join('\\n');\n  return csvContent;\n}\n\nexport function convertDataRowIntoCSVRows(dataRows: IDataRow[]) {\n  const csvRows = dataRows.map((dataRow) => {\n    const row: string[] = [];\n    row.push(dataRow.label);\n    row.push(dataRow.date.toString());\n    row.push(dataRow.amount.toString());\n    row.push(dataRow.frequency);\n    return row;\n  });\n  const headerRow = ['label', 'date', 'amount', 'frequency'];\n  csvRows.unshift(headerRow);\n  return csvRows;\n}\n\nexport function convertCSVRowIntoDataRow(csvRow: string[]) {\n  const label = csvRow[0];\n  const date: number = parseInt(csvRow[1]);\n  const amount: number = parseFloat(csvRow[2]);\n  const freqency = csvRow[3] as IFrequency;\n  const result: IDataRow = {\n    label: label,\n    date: !isNaN(date) ? date : -1,\n    amount: !isNaN(amount) ? amount : -1,\n    frequency: freqency,\n  };\n  return result;\n}\n","import AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport MobileDatePicker from '@mui/lab/MobileDatePicker';\nimport { TextField } from '@mui/material';\nimport { MaterialUiPickersDate } from '@material-ui/pickers/typings/date';\nexport interface DatePickerWrapperProps {\n    value: number;\n    label?: string;\n    onChange: (date: number) => void;\n}\n\nexport function DatePickerWrapper(props: DatePickerWrapperProps) {\n\n    function handleChange(date: MaterialUiPickersDate) {\n        if (date) {\n            props.onChange(date.getTime());\n        }\n    }\n\n    return <LocalizationProvider dateAdapter={AdapterDateFns}>\n        <MobileDatePicker\n            label={props.label}\n            inputFormat=\"MM/dd/yyyy\"\n            value={props.value}\n            onChange={handleChange}\n            renderInput={(params) => <TextField {...params} />}\n        />\n    </LocalizationProvider>\n\n\n}","\nimport { DatePickerWrapper } from './DatePickerWrapper';\nimport { IDataRow } from '../common/idatarow';\nimport { IFrequency } from '../common/common-types';\n\nimport TableCell from '@mui/material/TableCell';\nimport TableRow from '@mui/material/TableRow';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { MenuItem } from \"@material-ui/core\";\nimport { TextField } from '@material-ui/core';\nimport { FormControl, Select } from '@mui/material';\n\nexport interface IDataRowProps {\n    uuid: string;\n    data: IDataRow;\n    addRow: (data?: IDataRow) => void;\n    updateRow: (id: string, row: Partial<IDataRow>) => void;\n    deleteRow: (id: string) => void;\n}\nexport function DataRow(props: IDataRowProps) {\n    return <TableRow>\n        <TableCell className=\"label-form\"><TextField variant=\"outlined\" value={props.data.label} onChange={(e) => props.updateRow(props.uuid, { label: e.target.value })}></TextField></TableCell>\n        <TableCell className=\"label-date\">\n            <DatePickerWrapper value={props.data.date} onChange={(date: number) => props.updateRow(props.uuid, { date: date })}></DatePickerWrapper>\n        </TableCell>\n        <TableCell>\n            <TextField type=\"number\" variant=\"outlined\" value={props.data.amount} onChange={(e) => {\n                const amount = parseFloat(e.target.value);\n                if (amount) props.updateRow(props.uuid, { amount: amount });\n            }}></TextField>\n        </TableCell>\n        <TableCell>\n            <FormControl fullWidth>\n                <Select\n                    value={props.data.frequency}\n                    onChange={(e) => props.updateRow(props.uuid, { frequency: e.target.value as IFrequency })}\n                >\n                    <MenuItem value='once'>Once</MenuItem>\n                    <MenuItem value='daily'>Daily</MenuItem>\n                    <MenuItem value='weekly'>Weekly</MenuItem>\n                    <MenuItem value='monthly'>Monthly</MenuItem>\n                    <MenuItem value='yearly'>Yearly</MenuItem>\n                </Select>\n            </FormControl>\n        </TableCell>\n        <TableCell onClick={() => props.deleteRow(props.uuid)}><DeleteIcon /></TableCell>\n    </TableRow>\n}","import React from 'react';\nimport './Table.css'\n\nimport { IDataRow } from '../common/idatarow';\nimport { convertCSVRowIntoDataRow, convertDataRowIntoCSVRows, createCSV } from '../utilities/csv-utils'\nimport { DataRow } from './DataRow';\n\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Button from '@mui/material/Button';\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\n\nimport { parse } from 'papaparse';\n\n\nexport interface ITableProps {\n    title: string;\n    data: { [id: string]: IDataRow; }\n    addRow: (data?: IDataRow) => void;\n    updateRow: (id: string, row: Partial<IDataRow>) => void;\n    deleteRow: (id: string) => void;\n    onImportComplete: (data: IDataRow[]) => void;\n}\nexport function DataTable(props: ITableProps) {\n\n    function handleAddRow() {\n        props.addRow();\n    }\n    function handleImport(e: React.ChangeEvent<HTMLInputElement>) {\n        if (e.target.files) {\n            const file = e.target.files[0];\n            const reader = new FileReader();\n            reader.onload = (evt) => {\n                /* Parse data */\n                const bstr = evt.target?.result;\n                if (bstr) {\n                    const rows = parse(bstr.toString());\n                    const dataRows: IDataRow[] = []\n                    for (let i = 1; i < rows.data.length; i++) {\n                        const row = rows.data[i] as string[];\n                        const dataRow = convertCSVRowIntoDataRow(row);\n                        dataRows.push(dataRow);\n                    }\n                    props.onImportComplete(dataRows);\n                }\n            };\n            reader.readAsBinaryString(file);\n        }\n    }\n    function handleExport() {\n        const filename = props.title;\n        const csvRows = convertDataRowIntoCSVRows(Object.values(props.data));\n        const csvContent = createCSV(csvRows);\n        const link = document.createElement('a');\n        link.setAttribute('href', csvContent);\n        link.setAttribute('download', filename + \".csv\");\n        link.click();\n        link.remove();\n        // window.open(encodedUri);\n    }\n\n    return <div>\n        <div style={{ textAlign: 'center' }}><h3>{props.title} <AddCircleOutlineIcon onClick={handleAddRow} /></h3></div>\n        <div style={{ maxHeight: 400, overflowX: 'auto' }}>\n            <Table stickyHeader >\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Label </TableCell>\n                        <TableCell>Date</TableCell>\n                        <TableCell>Amount</TableCell>\n                        <TableCell>Frequency</TableCell>\n                        <TableCell>X</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody >\n                    {Object.entries(props.data).map((entry) => {\n                        const uuid = entry[0];\n                        const row = entry[1];\n                        return <DataRow key={uuid} uuid={uuid} data={row} addRow={props.addRow} updateRow={props.updateRow} deleteRow={props.deleteRow}></DataRow>\n                    })}\n                </TableBody>\n            </Table>\n        </div>\n        <input type=\"file\" accept=\".csv\" onChange={handleImport} />\n        <Button onClick={handleExport}>Export</Button>\n    </div>\n}\n\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../app/store';\nimport { AggregateOption } from '../common/common-types';\n\nexport interface ChartState {\n  expenses: ChartPoint[];\n  wages: ChartPoint[];\n  finances: ChartPoint[];\n  aggregateOption: AggregateOption;\n  startTimeMs: number;\n  endTimeMs: number;\n}\n\nexport interface ChartPoint {\n  date: number;\n  amount: number;\n}\n\nconst defaultEndDate = new Date();\ndefaultEndDate.setDate(defaultEndDate.getDate() + 7);\n\nconst initialState: ChartState = {\n  expenses: [],\n  wages: [],\n  finances: [],\n  aggregateOption: 'day',\n  startTimeMs: Date.now(),\n  endTimeMs: defaultEndDate.getTime(),\n};\n\nexport type ChartDataLabel = 'expenses' | 'wages' | 'finances';\n\nexport const chartSlice = createSlice({\n  name: 'chart',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    setChartData: (state, action: PayloadAction<Partial<ChartState>>) => {\n      if (action.payload.expenses) state.expenses = action.payload.expenses;\n      if (action.payload.finances) state.finances = action.payload.finances;\n      if (action.payload.wages) state.wages = action.payload.wages;\n    },\n    setAgggregateOption: (state, action: PayloadAction<AggregateOption>) => {\n      state.aggregateOption = action.payload;\n    },\n    setStartTimeMs: (state, action: PayloadAction<number>) => {\n      state.startTimeMs = action.payload;\n    },\n    setEndTimeMs: (state, action: PayloadAction<number>) => {\n      state.endTimeMs = action.payload;\n    },\n  },\n});\n\nexport const {\n  setChartData,\n  setAgggregateOption,\n  setStartTimeMs,\n  setEndTimeMs,\n} = chartSlice.actions;\n\nexport const selectChartExpenses = (state: RootState) => state.chart.expenses;\nexport const selectChartWages = (state: RootState) => state.chart.wages;\nexport const selectChartFinances = (state: RootState) => state.chart.finances;\nexport const selectChartAgggregateOption = (state: RootState) =>\n  state.chart.aggregateOption;\nexport const selectChartStartTimeMs = (state: RootState) =>\n  state.chart.startTimeMs;\nexport const selectChartEndTimeMs = (state: RootState) => state.chart.endTimeMs;\n\nexport default chartSlice.reducer;\n","import { AggregateOption } from '../common/common-types';\n\nexport const MILLIS_PER_WEEK = 1000 * 60 * 60 * 24 * 7;\nexport function createDateFromKey(\n  key: string,\n  aggregateOption: AggregateOption\n) {\n  let retVal;\n  switch (aggregateOption) {\n    case 'year':\n      const createdDate = new Date('1-1-1970');\n      // tslint:disable-next-line: radix\n      const year = Number.parseInt(key);\n      createdDate.setFullYear(year);\n      retVal = createdDate;\n      break;\n    case 'month':\n      retVal = new Date(key);\n      break;\n    case 'day':\n      retVal = new Date(key);\n      break;\n  }\n  return retVal;\n}\n\nexport function createKeyByAggregateOptionAndDate(\n  d: Date,\n  aggregateOption: AggregateOption\n) {\n  switch (aggregateOption) {\n    case 'year':\n      return '' + d.getFullYear();\n    case 'month':\n      return '' + d.getFullYear() + '/' + getMonthInMMFormat(d.getMonth());\n    case 'day':\n      return (\n        '' +\n        d.getFullYear() +\n        '/' +\n        getMonthInMMFormat(d.getMonth()) +\n        '/' +\n        d.getDate()\n      );\n  }\n}\n\nexport function getMonthInMMFormat(month: number) {\n  const actualMonth = month + 1;\n  if (actualMonth < 10) {\n    return '0' + actualMonth.toString();\n  } else {\n    return actualMonth.toString();\n  }\n}\nexport function getDateinDDFormat(date: number) {\n  if (date < 10) {\n    return '0' + date.toString();\n  } else {\n    return date.toString();\n  }\n}\nexport function compareDates(a: Date, b: Date) {\n  let compare = a.getFullYear() - b.getFullYear();\n  if (compare === 0) {\n    compare = a.getMonth() - b.getMonth();\n  }\n  if (compare === 0) {\n    compare = a.getDate() - b.getDate();\n  }\n  return compare;\n}\n","import { IDataRow } from '../common/idatarow';\nimport { AggregateOption, IFrequency } from '../common/common-types';\nimport { ChartPoint } from '../slices/chartSlice';\nimport {\n  createDateFromKey,\n  createKeyByAggregateOptionAndDate,\n} from './date-utils';\n\nexport function convertDataRowsIntoChartData(\n  expenses: IDataRow[],\n  wages: IDataRow[],\n  startDateMs: number,\n  endDateMs: number,\n  aggregateOption: AggregateOption\n) {\n  // project future chart points\n  const allExpensesChartData: ChartPoint[] = [];\n  const allWagesChartData: ChartPoint[] = [];\n  expenses.forEach((val) =>\n    allExpensesChartData.push(\n      ...generateRecurringChartData(val, startDateMs, endDateMs)\n    )\n  );\n  wages.forEach((val) =>\n    allWagesChartData.push(\n      ...generateRecurringChartData(val, startDateMs, endDateMs)\n    )\n  );\n\n  // aggregate future points\n  const aggregatedExpensesMap = aggregateChartDataByFrequency(\n    allExpensesChartData,\n    aggregateOption\n  );\n  const aggregatedWagesMap = aggregateChartDataByFrequency(\n    allWagesChartData,\n    aggregateOption\n  );\n\n  // convert aggregate maps to chart points\n  const expensesChartPoints: ChartPoint[] = [];\n  const wagesChartPoints: ChartPoint[] = [];\n\n  aggregatedExpensesMap.forEach((value, key) => {\n    const date = createDateFromKey(key, aggregateOption);\n    expensesChartPoints.push({ date: date.getTime(), amount: value });\n  });\n\n  aggregatedWagesMap.forEach((value, key) => {\n    const date = createDateFromKey(key, aggregateOption);\n    wagesChartPoints.push({ date: date.getTime(), amount: value });\n  });\n\n  expensesChartPoints.sort((a, b) => a.date - b.date);\n  wagesChartPoints.sort((a, b) => a.date - b.date);\n\n  // combine points\n  const financesChartData: ChartPoint[] = [\n    ...expensesChartPoints,\n    ...wagesChartPoints,\n  ];\n\n  // aggregate points\n  const aggregatedFinancesMap = aggregateChartDataByFrequency(\n    financesChartData,\n    aggregateOption\n  );\n\n  // convert aggregate map to chart points\n  const financesChartPoints: ChartPoint[] = [];\n  aggregatedFinancesMap.forEach((value, key) => {\n    const date = createDateFromKey(key, aggregateOption);\n    financesChartPoints.push({ date: date.getTime(), amount: value });\n  });\n  financesChartPoints.sort((a, b) => a.date - b.date);\n\n  // create running total of finances\n  let sum = 0;\n  financesChartPoints.forEach((point) => {\n    sum += point.amount;\n    point.amount = sum;\n  });\n\n  // return results\n  return {\n    expenses: expensesChartPoints,\n    wages: wagesChartPoints,\n    finances: financesChartPoints,\n  };\n}\nfunction generateRecurringChartData(\n  data: IDataRow,\n  startDateMs: number,\n  endDateMs: number\n) {\n  const date = new Date(data.date);\n  const retVal: ChartPoint[] = [];\n  if (data.frequency === 'once' || !(endDateMs > startDateMs)) {\n    retVal.push({ date: date.getTime(), amount: data.amount });\n  } else {\n    let timeMs = date.getTime();\n    while (!(timeMs > endDateMs)) {\n      if (timeMs >= startDateMs) {\n        retVal.push({ date: date.getTime(), amount: data.amount });\n      }\n      incrementDate(data.frequency, date);\n      timeMs = date.getTime();\n    }\n  }\n  return retVal;\n}\nfunction incrementDate(frequency: IFrequency, d: Date) {\n  switch (frequency) {\n    case 'daily':\n      d.setDate(d.getDate() + 1);\n      break;\n    case 'weekly':\n      d.setDate(d.getDate() + 7);\n      break;\n    case 'monthly':\n      d.setMonth(d.getMonth() + 1);\n      break;\n    case 'yearly':\n      d.setFullYear(d.getFullYear() + 1);\n      break;\n    default:\n      break;\n  }\n}\nfunction aggregateChartDataByFrequency(\n  data: ChartPoint[],\n  aggregateOption: AggregateOption\n) {\n  const map: Map<string, number> = new Map<string, number>();\n  data.forEach((val) => {\n    const key = createKeyByAggregateOptionAndDate(\n      new Date(val.date),\n      aggregateOption\n    );\n    if (key) {\n      const value = map.get(key);\n      const sum = value ? value : 0;\n      map.set(key, sum + val.amount);\n    }\n  });\n  return map;\n}\n","import React, { useEffect, useRef } from \"react\";\nimport 'chartjs-adapter-moment';\nimport { Chart, Legend, LineController, LineElement, PointElement, LinearScale, TimeScale, Title, Tooltip } from 'chart.js';\nimport { useAppDispatch, useAppSelector } from \"../app/hooks\";\nimport { MenuItem } from \"@material-ui/core\";\nimport { selectChartExpenses, selectChartFinances, selectChartAgggregateOption, selectChartWages, setChartData, setAgggregateOption, selectChartStartTimeMs, selectChartEndTimeMs, setStartTimeMs, setEndTimeMs } from \"../slices/chartSlice\";\nimport { AggregateOption } from \"../common/common-types\";\nimport { selectExpenses } from \"../slices/expensesSlice\";\nimport { selectWages } from \"../slices/wagesSlice\";\nimport { convertDataRowsIntoChartData } from \"../utilities/chart-utils\";\nimport { DatePickerWrapper } from \"./DatePickerWrapper\";\nimport { FormControl, InputLabel, Select } from \"@mui/material\";\nChart.register(Legend, LineController, LineElement, PointElement, LinearScale, TimeScale, Title, Tooltip);\n\nconst chartConfig: any = {\n    type: 'line',\n    data: {\n        datasets: [\n            {\n                label: 'Wallet',\n                fill: true,\n                backgroundColor: \"rgb(150, 105, 25, 0.8)\",\n                borderColor: \"rgb(150, 105, 25, 1)\",\n                data: [],\n            },\n            {\n                label: 'Income',\n                fill: true,\n                backgroundColor: \"rgba(63, 195, 128, 0.8)\",\n                borderColor: \"rgba(63, 195, 128, 1)\",\n                data: [],\n            },\n            {\n                label: 'Expenses',\n                fill: true,\n                backgroundColor: \"rgba(255, 99, 132, 0.8)\",\n                borderColor: \"rgba(255, 99, 132, 1)\",\n                data: [],\n            },\n        ]\n    },\n    options: {\n        responsive: true,\n        // responsive: false,\n        plugins: {\n            legend: {\n                position: 'top',\n            },\n            title: {\n                display: true,\n                text: 'Finances'\n            }\n        },\n        scales: {\n            x: {\n                type: 'time',\n                distribution: 'series'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    },\n\n};\n\ninterface ChartJSPoint {\n    x: Date,\n    y: number\n}\nexport default function DataChart() {\n    const dispatch = useAppDispatch();\n    // canvas variable for ChartJs\n    const chartContainer = useRef<HTMLCanvasElement | null>(null);\n    const chartInstance = useRef<Chart | null>(null);\n\n    const expensesData = useAppSelector(selectExpenses);\n    const wagesData = useAppSelector(selectWages);\n\n    const startTimeMs = useAppSelector(selectChartStartTimeMs);\n    const endTimeMs = useAppSelector(selectChartEndTimeMs);\n\n    const expenses = useAppSelector(selectChartExpenses);\n    const finances = useAppSelector(selectChartFinances);\n    const wages = useAppSelector(selectChartWages);\n    const aggregateOption = useAppSelector(selectChartAgggregateOption);\n\n    // creates canvas for ChartJs\n    useEffect(() => {\n        if (chartContainer && chartContainer.current) {\n            chartInstance.current = new Chart(chartContainer.current, chartConfig);\n        }\n        return () => {\n            if (chartInstance && chartInstance.current) {\n                chartInstance.current.destroy();\n            }\n        }\n    }, [chartContainer]);\n\n    // listens to updates on chart data and updates the canvas\n    useEffect(() => {\n        if (chartInstance && chartInstance.current) {\n            const finanacesPoints: ChartJSPoint[] = finances.map((point) => {\n                return { x: new Date(point.date), y: point.amount };\n            })\n            const wagesPoints: ChartJSPoint[] = wages.map((point) => {\n                return { x: new Date(point.date), y: point.amount };\n            })\n            const expensesPoints: ChartJSPoint[] = expenses.map((point) => {\n                return { x: new Date(point.date), y: point.amount };\n            })\n            chartInstance.current.data.datasets[0].data = finanacesPoints as any;\n            chartInstance.current.data.datasets[1].data = wagesPoints as any;\n            chartInstance.current.data.datasets[2].data = expensesPoints as any;\n\n            chartInstance.current.update();\n        }\n        return () => {\n\n        }\n    }, [expenses, wages, finances, aggregateOption])\n\n    // leverage React to listen to changes in state and convert to chart data accordingly\n    useEffect(() => {\n        const chartData = convertDataRowsIntoChartData(Object.values(expensesData), Object.values(wagesData), startTimeMs, endTimeMs, aggregateOption);\n        dispatch(setChartData({\n            expenses: chartData.expenses,\n            wages: chartData.wages,\n            finances: chartData.finances\n        }))\n\n    }, [dispatch, wagesData, expensesData, aggregateOption, startTimeMs, endTimeMs])\n\n    function handleAggregateOptionChange(event: any) {\n        const option: AggregateOption = event.target.value as AggregateOption;\n        dispatch(setAgggregateOption(option));\n    }\n\n    function handleStartTimeChange(date: number) {\n        dispatch(setStartTimeMs(date));\n    }\n    function handleEndTimeChange(date: number) {\n        dispatch(setEndTimeMs(date));\n    }\n\n    return (\n        <div>\n            <div style={{ minWidth: 500 }}>\n                <DatePickerWrapper value={startTimeMs} label={\"Start Time\"} onChange={handleStartTimeChange}></DatePickerWrapper>\n                <DatePickerWrapper value={endTimeMs} label={\"End Time\"} onChange={handleEndTimeChange}></DatePickerWrapper>\n                <FormControl >\n                    <InputLabel id=\"aggregate-by-label\">Aggregate</InputLabel>\n                    <Select\n                        labelId=\"aggregate-by-label\"\n                        id=\"aggregate-by\"\n                        label=\"Aggregate\"\n                        value={aggregateOption}\n                        onChange={handleAggregateOptionChange}\n                    >\n                        <MenuItem value={\"day\"}>Day</MenuItem>\n                        <MenuItem value={\"month\"}>Month</MenuItem>\n                        <MenuItem value={\"year\"}>Year</MenuItem>\n                    </Select>\n                </FormControl>\n            </div>\n            <div>\n                <canvas ref={chartContainer} />\n            </div>\n        </div>\n    );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { addExpense, bulkAddExpenses, removeExpense, selectExpenses, updateExpense } from './slices/expensesSlice';\nimport { addWage, bulkAddWages, removeWage, selectWages, updateWage } from './slices/wagesSlice';\nimport { Expense } from './common/expense';\nimport { Wage } from './common/wage';\nimport { DataTable } from './components/Table';\nimport DataChart from './components/DataChart';\nimport { setEndTimeMs, setStartTimeMs } from './slices/chartSlice';\nimport { IDataRow } from './common/idatarow';\nimport { MILLIS_PER_WEEK } from './utilities/date-utils';\n\n\nfunction App() {\n  const expenses = useAppSelector(selectExpenses);\n  const wages = useAppSelector(selectWages);\n\n  const dispatch = useAppDispatch();\n  function handleCreateExpense(expense?: Expense) {\n    dispatch(addExpense(expense ? expense : null))\n  }\n  function handleCreateWage(wage?: Wage) {\n    dispatch(addWage(wage ? wage : null))\n  }\n\n  function handleUpdateWage(id: string, wage: Partial<Wage>) {\n    dispatch(updateWage({ id: id, wage: wage }))\n  }\n\n  function handleUpdateExpense(id: string, expense: Partial<Expense>) {\n    dispatch(updateExpense({ id: id, expense: expense }))\n  }\n\n  function handleRemoveWage(id: string) {\n    dispatch(removeWage({ id: id }))\n  }\n\n  function handleRemoveExpense(id: string) {\n    dispatch(removeExpense({ id: id }))\n  }\n\n  function handleImportExpensesComplete(data: IDataRow[]) {\n    const expensesTimeArr = Object.values(data).map((val) => val.date);\n    const minTime = Math.min(...expensesTimeArr);\n    const maxTime = Math.max(...expensesTimeArr);\n    dispatch(bulkAddExpenses(data));\n    dispatch(setStartTimeMs(minTime));\n    // set end time to at least a week from the start time\n    const endTimeMillis = maxTime - minTime > MILLIS_PER_WEEK ? maxTime : minTime + MILLIS_PER_WEEK;\n    dispatch(setEndTimeMs(endTimeMillis));\n  }\n\n  function handleImportWagesComplete(data: IDataRow[]) {\n    const expensesTimeArr = Object.values(data).map((val) => val.date);\n    const minTime = Math.min(...expensesTimeArr);\n    const maxTime = Math.max(...expensesTimeArr);\n    dispatch(bulkAddWages(data));\n    dispatch(setStartTimeMs(minTime));\n    // set end time to at least a week from the start time\n    const endTimeMillis = maxTime - minTime > MILLIS_PER_WEEK ? maxTime : minTime + MILLIS_PER_WEEK;\n    dispatch(setEndTimeMs(endTimeMillis));\n  }\n\n  return (\n    <div>\n      <div style={{ textAlign: 'center' }}><h1>Financial Planner</h1></div>\n      <DataChart></DataChart>\n      <DataTable title={\"Income\"} data={wages} addRow={handleCreateWage} updateRow={handleUpdateWage} deleteRow={handleRemoveWage} onImportComplete={handleImportWagesComplete}></DataTable>\n      <DataTable title={\"Expenses\"} data={expenses} addRow={handleCreateExpense} updateRow={handleUpdateExpense} deleteRow={handleRemoveExpense} onImportComplete={handleImportExpensesComplete}></DataTable>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport expensesReducer from '../slices/expensesSlice';\nimport wagesReducer from '../slices/wagesSlice';\nimport chartReducer from '../slices/chartSlice';\n\nexport const store = configureStore({\n  reducer: {\n    expenses: expensesReducer,\n    wages: wagesReducer,\n    chart: chartReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}